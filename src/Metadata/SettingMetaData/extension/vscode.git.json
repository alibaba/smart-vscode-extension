[
    {
        "name": "git.enabled",
        "desc": "Whether Git is enabled.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.path",
        "default": null,
        "type": [
            "string",
            "null",
            "array"
        ]
    },
    {
        "name": "git.autoRepositoryDetection",
        "desc": "Configures when repositories should be automatically detected.",
        "default": true,
        "type": [
            "boolean",
            "string"
        ]
    },
    {
        "name": "git.autorefresh",
        "desc": "Whether auto refreshing is enabled.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.autofetch",
        "default": false,
        "type": [
            "boolean",
            "string"
        ]
    },
    {
        "name": "git.autofetchPeriod",
        "default": 180,
        "type": "number"
    },
    {
        "name": "git.defaultBranchName",
        "default": "main",
        "type": "string"
    },
    {
        "name": "git.branchPrefix",
        "desc": "Prefix used when creating a new branch.",
        "default": "",
        "type": "string"
    },
    {
        "name": "git.branchProtection",
        "default": [],
        "type": "array"
    },
    {
        "name": "git.branchProtectionPrompt",
        "desc": "Controls whether a prompt is being shown before changes are committed to a protected branch.",
        "default": "alwaysPrompt",
        "type": "string"
    },
    {
        "name": "git.branchValidationRegex",
        "desc": "A regular expression to validate new branch names.",
        "default": "",
        "type": "string"
    },
    {
        "name": "git.branchWhitespaceChar",
        "desc": "The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.",
        "default": "-",
        "type": "string"
    },
    {
        "name": "git.branchRandomName.enable",
        "desc": "Controls whether a random name is generated when creating a new branch.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.branchRandomName.dictionary",
        "default": [
            "adjectives",
            "animals"
        ],
        "type": "array"
    },
    {
        "name": "git.confirmSync",
        "desc": "Confirm before synchronizing Git repositories.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.countBadge",
        "desc": "Controls the Git count badge.",
        "default": "all",
        "type": "string"
    },
    {
        "name": "git.checkoutType",
        "default": [
            "local",
            "remote",
            "tags"
        ],
        "type": "array"
    },
    {
        "name": "git.ignoreLegacyWarning",
        "desc": "Ignores the legacy Git warning.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.ignoreMissingGitWarning",
        "desc": "Ignores the warning when Git is missing.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.ignoreWindowsGit27Warning",
        "desc": "Ignores the warning when Git 2.25 - 2.26 is installed on Windows.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.ignoreLimitWarning",
        "desc": "Ignores the warning when there are too many changes in a repository.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.ignoreRebaseWarning",
        "desc": "Ignores the warning when it looks like the branch might have been rebased when pulling.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.defaultCloneDirectory",
        "desc": "The default location to clone a Git repository.",
        "default": null,
        "type": [
            "string",
            "null"
        ]
    },
    {
        "name": "git.useEditorAsCommitInput",
        "desc": "Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.verboseCommit",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.enableSmartCommit",
        "desc": "Commit all changes when there are no staged changes.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.smartCommitChanges",
        "desc": "Control which changes are automatically staged by Smart Commit.",
        "default": "all",
        "type": "string"
    },
    {
        "name": "git.suggestSmartCommit",
        "desc": "Suggests to enable smart commit (commit all changes when there are no staged changes).",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.enableCommitSigning",
        "desc": "Enables commit signing with GPG, X.509, or SSH.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.confirmEmptyCommits",
        "desc": "Always confirm the creation of empty commits for the 'Git: Commit Empty' command.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.decorations.enabled",
        "desc": "Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.enableStatusBarSync",
        "desc": "Controls whether the Git Sync command appears in the status bar.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.followTagsWhenSync",
        "desc": "Push all annotated tags when running the sync command.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.replaceTagsWhenPull",
        "desc": "Automatically replace the local tags with the remote tags in case of a conflict when running the pull command.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.promptToSaveFilesBeforeStash",
        "desc": "Controls whether Git should check for unsaved files before stashing changes.",
        "default": "always",
        "type": "string"
    },
    {
        "name": "git.promptToSaveFilesBeforeCommit",
        "desc": "Controls whether Git should check for unsaved files before committing.",
        "default": "always",
        "type": "string"
    },
    {
        "name": "git.postCommitCommand",
        "default": "none",
        "type": "string"
    },
    {
        "name": "git.rememberPostCommitCommand",
        "desc": "Remember the last git command that ran after a commit.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.openAfterClone",
        "desc": "Controls whether to open a repository automatically after cloning.",
        "default": "prompt",
        "type": "string"
    },
    {
        "name": "git.showInlineOpenFileAction",
        "desc": "Controls whether to show an inline Open File action in the Git changes view.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.showPushSuccessNotification",
        "desc": "Controls whether to show a notification when a push is successful.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.inputValidation",
        "desc": "Controls whether to show commit message input validation diagnostics.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.inputValidationLength",
        "desc": "Controls the commit message length threshold for showing a warning.",
        "default": 72,
        "type": "number"
    },
    {
        "name": "git.inputValidationSubjectLength",
        "default": 50,
        "type": [
            "number",
            "null"
        ]
    },
    {
        "name": "git.detectSubmodules",
        "desc": "Controls whether to automatically detect Git submodules.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.detectSubmodulesLimit",
        "desc": "Controls the limit of Git submodules detected.",
        "default": 10,
        "type": "number"
    },
    {
        "name": "git.alwaysShowStagedChangesResourceGroup",
        "desc": "Always show the Staged Changes resource group.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.alwaysSignOff",
        "desc": "Controls the signoff flag for all commits.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.ignoreSubmodules",
        "desc": "Ignore modifications to submodules in the file tree.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.ignoredRepositories",
        "desc": "List of Git repositories to ignore.",
        "default": [],
        "type": "array"
    },
    {
        "name": "git.scanRepositories",
        "desc": "List of paths to search for Git repositories in.",
        "default": [],
        "type": "array"
    },
    {
        "name": "git.showProgress",
        "desc": "Controls whether Git actions should show progress.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.rebaseWhenSync",
        "desc": "Force Git to use rebase when running the sync command.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.pullBeforeCheckout",
        "desc": "Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.fetchOnPull",
        "desc": "When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.pruneOnFetch",
        "desc": "Prune when fetching.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.pullTags",
        "desc": "Fetch all tags when pulling.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.autoStash",
        "desc": "Stash any changes before pulling and restore them after successful pull.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.allowForcePush",
        "desc": "Controls whether force push (with or without lease) is enabled.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.useForcePushWithLease",
        "desc": "Controls whether force pushing uses the safer force-with-lease variant.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.useForcePushIfIncludes",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.confirmForcePush",
        "desc": "Controls whether to ask for confirmation before force-pushing.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.allowNoVerifyCommit",
        "desc": "Controls whether commits without running pre-commit and commit-msg hooks are allowed.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.confirmNoVerifyCommit",
        "desc": "Controls whether to ask for confirmation before committing without verification.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.closeDiffOnOperation",
        "desc": "Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.openDiffOnClick",
        "desc": "Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.supportCancellation",
        "desc": "Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.branchSortOrder",
        "desc": "Controls the sort order for branches.",
        "default": "committerdate",
        "type": "string"
    },
    {
        "name": "git.untrackedChanges",
        "desc": "Controls how untracked changes behave.",
        "default": "mixed",
        "type": "string"
    },
    {
        "name": "git.requireGitUserConfig",
        "desc": "Controls whether to require explicit Git user configuration or allow Git to guess if missing.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.showCommitInput",
        "desc": "Controls whether to show the commit input in the Git source control panel.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.terminalAuthentication",
        "desc": "Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.terminalGitEditor",
        "desc": "Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.useCommitInputAsStashMessage",
        "desc": "Controls whether to use the message from the commit input box as the default stash message.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.useIntegratedAskPass",
        "desc": "Controls whether GIT_ASKPASS should be overwritten to use the integrated version.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.githubAuthentication"
    },
    {
        "name": "git.timeline.date",
        "desc": "Controls which date to use for items in the Timeline view.",
        "default": "committed",
        "type": "string"
    },
    {
        "name": "git.timeline.showAuthor",
        "desc": "Controls whether to show the commit author in the Timeline view.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.timeline.showUncommitted",
        "desc": "Controls whether to show uncommitted changes in the Timeline view.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.showActionButton",
        "desc": "Controls whether an action button is shown in the Source Control view.",
        "default": {
            "commit": true,
            "publish": true,
            "sync": true
        },
        "type": "object"
    },
    {
        "name": "git.statusLimit",
        "desc": "Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.",
        "default": 10000,
        "type": "number"
    },
    {
        "name": "git.repositoryScanIgnoredFolders",
        "default": [
            "node_modules"
        ],
        "type": "array"
    },
    {
        "name": "git.repositoryScanMaxDepth",
        "default": 1,
        "type": "number"
    },
    {
        "name": "git.commandsToLog",
        "default": [],
        "type": "array"
    },
    {
        "name": "git.mergeEditor",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "git.optimisticUpdate",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "git.openRepositoryInParentFolders",
        "default": "prompt",
        "type": "string"
    },
    {
        "name": "git.similarityThreshold",
        "default": 50,
        "type": "number"
    }
]