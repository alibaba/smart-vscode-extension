[
    {
        "name": "C_Cpp.inlayHints.autoDeclarationTypes.enabled",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.inlayHints.parameterNames.enabled",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.inlayHints.parameterNames.suppressWhenArgumentContainsName",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.inlayHints.parameterNames.hideLeadingUnderscores",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.inlayHints.referenceOperator.enabled",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.inlayHints.referenceOperator.showSpace",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.intelliSenseUpdateDelay",
        "desc": "Controls the delay in milliseconds before IntelliSense starts updating after a modification.",
        "default": 1000,
        "type": "number"
    },
    {
        "name": "C_Cpp.codeFolding",
        "desc": "If enabled, code folding ranges are provided by the language server.",
        "default": "enabled",
        "type": "string"
    },
    {
        "name": "C_Cpp.autocompleteAddParentheses",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.suggestSnippets",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.enhancedColorization",
        "default": "enabled",
        "type": "string"
    },
    {
        "name": "C_Cpp.legacyCompilerArgsBehavior",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.autocomplete",
        "default": "default",
        "type": "string"
    },
    {
        "name": "C_Cpp.hover",
        "desc": "If disabled, hover details are no longer provided by the language server.",
        "default": "default",
        "type": "string"
    },
    {
        "name": "C_Cpp.errorSquiggles",
        "desc": "Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. It also controls whether code analysis warnings are reported if includes can't be found. This setting is ignored by the Tag Parser engine.",
        "default": "enabledIfIncludesResolve",
        "type": "string"
    },
    {
        "name": "C_Cpp.dimInactiveRegions",
        "desc": "Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.inactiveRegionOpacity",
        "default": 0.55
    },
    {
        "name": "C_Cpp.inactiveRegionForegroundColor",
        "desc": "Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.",
        "type": "string"
    },
    {
        "name": "C_Cpp.inactiveRegionBackgroundColor",
        "desc": "Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.",
        "type": "string"
    },
    {
        "name": "C_Cpp.refactoring.includeHeader",
        "default": "always",
        "type": "string"
    },
    {
        "name": "C_Cpp.renameRequiresIdentifier",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.workspaceSymbols",
        "desc": "The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.",
        "default": "Just My Code",
        "type": "string"
    },
    {
        "name": "C_Cpp.default.includePath",
        "type": "array"
    },
    {
        "name": "C_Cpp.default.defines",
        "type": "array"
    },
    {
        "name": "C_Cpp.default.macFrameworkPath",
        "type": "array"
    },
    {
        "name": "C_Cpp.default.windowsSdkVersion",
        "type": "string"
    },
    {
        "name": "C_Cpp.default.compileCommands",
        "type": "string"
    },
    {
        "name": "C_Cpp.default.forcedInclude",
        "type": "array"
    },
    {
        "name": "C_Cpp.default.intelliSenseMode",
        "type": "string"
    },
    {
        "name": "C_Cpp.default.compilerPath",
        "default": null,
        "type": [
            "string",
            "null"
        ]
    },
    {
        "name": "C_Cpp.default.compilerArgs",
        "type": "array"
    },
    {
        "name": "C_Cpp.default.cStandard",
        "type": "string"
    },
    {
        "name": "C_Cpp.default.cppStandard",
        "type": "string"
    },
    {
        "name": "C_Cpp.default.configurationProvider",
        "type": "string"
    },
    {
        "name": "C_Cpp.default.mergeConfigurations",
        "type": "boolean"
    },
    {
        "name": "C_Cpp.default.browse.path",
        "default": null,
        "type": "array"
    },
    {
        "name": "C_Cpp.default.browse.databaseFilename",
        "type": "string"
    },
    {
        "name": "C_Cpp.default.browse.limitSymbolsToIncludedHeaders",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.default.systemIncludePath",
        "type": "array"
    },
    {
        "name": "C_Cpp.default.customConfigurationVariables",
        "default": null,
        "type": [
            "object",
            "null"
        ]
    },
    {
        "name": "C_Cpp.default.enableConfigurationSquiggles",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.default.dotConfig",
        "type": "string"
    },
    {
        "name": "C_Cpp.configurationWarnings",
        "desc": "Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.",
        "default": "enabled",
        "type": "string"
    },
    {
        "name": "C_Cpp.workspaceParsingPriority",
        "default": "highest",
        "type": "string"
    },
    {
        "name": "C_Cpp.intelliSenseEngine",
        "desc": "Controls the IntelliSense provider.",
        "default": "default",
        "type": "string"
    },
    {
        "name": "C_Cpp.intelliSenseEngineFallback",
        "default": "disabled",
        "type": "string"
    },
    {
        "name": "C_Cpp.exclusionPolicy",
        "default": "checkFolders",
        "type": "string"
    },
    {
        "name": "C_Cpp.files.exclude",
        "default": {
            "**/.vscode": true,
            "**/.vs": true
        },
        "type": "object"
    },
    {
        "name": "C_Cpp.vcFormat.indent.braces",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.indent.multiLineRelativeTo",
        "desc": "Determines what new line indentation is relative to.",
        "default": "innermostParenthesis",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.indent.withinParentheses",
        "default": "indent",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.indent.preserveWithinParentheses",
        "desc": "In existing code, preserve the existing indent alignment of new lines within parentheses.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.indent.caseLabels",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.indent.caseContents",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.indent.caseContentsWhenBlock",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.indent.lambdaBracesWhenParameter",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.indent.gotoLabels",
        "desc": "The position of goto labels.",
        "default": "oneLeft",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.indent.preprocessor",
        "desc": "The position of preprocessor directives.",
        "default": "leftmostColumn",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.indent.accessSpecifiers",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.indent.namespaceContents",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.indent.preserveComments",
        "desc": "Indentation of comments is not changed during formatting operations.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace",
        "desc": "The position of opening braces for namespaces.",
        "default": "ignore",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.beforeOpenBrace.type",
        "desc": "The position of opening braces for type definitions.",
        "default": "ignore",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.beforeOpenBrace.function",
        "desc": "The position of opening braces for functions.",
        "default": "ignore",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.beforeOpenBrace.block",
        "desc": "The position of opening braces for control blocks.",
        "default": "ignore",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda",
        "desc": "The position of opening braces for lambda functions.",
        "default": "ignore"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines",
        "desc": "Place opening and closing braces for scopes on separate lines.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType",
        "desc": "For empty types, move closing braces to the same line as opening braces.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction",
        "desc": "For empty function bodies, move closing braces to the same line as opening braces.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.beforeCatch",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.beforeElse",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.newLine.beforeWhileInDoWhile",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis",
        "desc": "Spacing between function names and opening parentheses of argument lists.",
        "default": "remove",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.space.withinParameterListParentheses",
        "desc": "A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses",
        "desc": "When a function parameter list is empty, a space is inserted between its parentheses.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements",
        "desc": "A space is added between the keyword and opening parenthesis in control flow statements.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.withinControlFlowStatementParentheses",
        "desc": "A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis",
        "desc": "A space is added before the opening parenthesis of lambda argument lists.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.withinCastParentheses",
        "desc": "A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.afterCastCloseParenthesis",
        "desc": "A space is added after the closing parenthesis of a C-style cast.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.withinExpressionParentheses",
        "desc": "A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.beforeBlockOpenBrace",
        "desc": "A space is added before the opening braces of scope blocks.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.betweenEmptyBraces",
        "desc": "When braces are empty and on the same line, a space is inserted between them.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.beforeInitializerListOpenBrace",
        "desc": "A space is added before the opening brace of uniform initialization and initializer lists.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.withinInitializerListBraces",
        "desc": "A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.preserveInInitializerList",
        "desc": "Spaces around commas are preserved inside uniform initialization and initializer lists.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.beforeOpenSquareBracket",
        "desc": "A space is added before opening square brackets.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.withinSquareBrackets",
        "desc": "A space is added after the opening square bracket and also before the closing square bracket.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.beforeEmptySquareBrackets",
        "desc": "When square brackets are empty, a space is added before the opening bracket.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.betweenEmptySquareBrackets",
        "desc": "When square brackets are empty, a space is inserted between them.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.groupSquareBrackets",
        "desc": "For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.withinLambdaBrackets",
        "desc": "A space is added after the opening square bracket and also before the closing square bracket.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets",
        "desc": "When square brackets are empty, a space is inserted between them.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.beforeComma",
        "desc": "A space is added before every comma.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.afterComma",
        "desc": "A space is added after every comma.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.removeAroundMemberOperators",
        "desc": "Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.beforeInheritanceColon",
        "desc": "A space is added before the colon for inherited types in class definitions.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.beforeConstructorColon",
        "desc": "A space is added before the colon in constructor definitions.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.removeBeforeSemicolon",
        "desc": "Spaces are removed before every semicolon.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.insertAfterSemicolon",
        "desc": "A space is inserted after every semicolon.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.removeAroundUnaryOperator",
        "desc": "Spaces between unary operators and operands are removed.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.vcFormat.space.aroundBinaryOperator",
        "desc": "Spaces around binary operators.",
        "default": "insert",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.space.aroundAssignmentOperator",
        "desc": "Spaces around assignment operators.",
        "default": "insert",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.space.pointerReferenceAlignment",
        "desc": "Spaces around pointer and reference operators.",
        "default": "left",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.space.aroundTernaryOperator",
        "desc": "Spaces around conditional operators.",
        "default": "insert",
        "type": "string"
    },
    {
        "name": "C_Cpp.vcFormat.wrap.preserveBlocks",
        "desc": "Wrapping options for blocks.",
        "default": "oneLiners",
        "type": "string"
    },
    {
        "name": "C_Cpp.clang_format_path",
        "type": "string"
    },
    {
        "name": "C_Cpp.clang_format_style",
        "default": "file",
        "type": "string"
    },
    {
        "name": "C_Cpp.formatting",
        "desc": "Configures the formatting engine.",
        "default": "default",
        "type": "string"
    },
    {
        "name": "C_Cpp.clang_format_fallbackStyle",
        "default": "Visual Studio",
        "type": "string"
    },
    {
        "name": "C_Cpp.clang_format_sortIncludes",
        "default": null,
        "type": [
            "boolean",
            "null"
        ]
    },
    {
        "name": "C_Cpp.doxygen.generateOnType",
        "desc": "Controls whether to automatically insert the Doxygen comment after typing the chosen comment style.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.doxygen.generatedStyle",
        "desc": "The string of characters used as the starting line of the Doxygen comment.",
        "default": "///",
        "type": "string"
    },
    {
        "name": "C_Cpp.doxygen.sectionTags",
        "desc": "Select the Doxygen section tags that you would like to appear on hover in the tooltip area when the 'Simplify Structured Comments' setting is enabled. ",
        "default": [
            "attention",
            "tparam",
            "param",
            "result",
            "returns",
            "retval",
            "exception",
            "deprecated",
            "warning",
            "note"
        ],
        "type": "array"
    },
    {
        "name": "C_Cpp.commentContinuationPatterns",
        "desc": "Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.",
        "default": [
            "/**"
        ],
        "type": "array"
    },
    {
        "name": "C_Cpp.markdownInComments",
        "desc": "Select whether markdown will be available in the hover tooltip. By default, only a subset of markdown will be applied to comments in the hover tooltip.",
        "default": "subsetEnabled",
        "type": "string"
    },
    {
        "name": "C_Cpp.simplifyStructuredComments",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.codeAnalysis.maxConcurrentThreads",
        "default": null,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.codeAnalysis.maxMemory",
        "default": null,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.codeAnalysis.updateDelay",
        "default": 2000,
        "type": "number"
    },
    {
        "name": "C_Cpp.codeAnalysis.exclude",
        "default": {},
        "type": "object"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.codeAction.formatFixes",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.codeAction.showClear",
        "desc": "Controls which 'Clear' code analysis problem code action options are available. Changing the setting to show more options may require re-running code analysis.",
        "default": "AllAndAllTypeAndThis",
        "type": "string"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.codeAction.showDisable",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.codeAction.showDocumentation",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.codeAnalysis.runAutomatically",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.enabled",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.path",
        "type": "string"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.config",
        "type": "string"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.fallbackConfig",
        "type": "string"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.headerFilter",
        "default": null,
        "type": [
            "string",
            "null"
        ]
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.args",
        "type": "array"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.useBuildPath",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.checks.enabled",
        "type": "array"
    },
    {
        "name": "C_Cpp.codeAnalysis.clangTidy.checks.disabled",
        "type": "array"
    },
    {
        "name": "C_Cpp.debugger.useBacktickCommandSubstitution",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.sshTargetsView",
        "desc": "Controls whether the SSH Targets view is visible. By default, enable the view when an SSH command is invoked.",
        "default": "default",
        "type": "string"
    },
    {
        "name": "C_Cpp.debugShortcut",
        "desc": "Show the \"Run and Debug\" play button and \"Add Debug Configuration\" gear in the editor title bar for C++ files.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.references.maxConcurrentThreads",
        "default": null,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.references.maxCachedProcesses",
        "default": 0,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.references.maxMemory",
        "default": null,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.intelliSenseCachePath",
        "type": "string"
    },
    {
        "name": "C_Cpp.intelliSenseCacheSize",
        "default": 5120,
        "type": "number"
    },
    {
        "name": "C_Cpp.intelliSenseMemoryLimit",
        "default": 4096,
        "type": "number"
    },
    {
        "name": "C_Cpp.maxConcurrentThreads",
        "default": null,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.maxCachedProcesses",
        "default": null,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.maxMemory",
        "default": null,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.maxSymbolSearchResults",
        "default": 5000,
        "type": "integer"
    },
    {
        "name": "C_Cpp.intelliSense.maxCachedProcesses",
        "default": null,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.intelliSense.maxMemory",
        "default": null,
        "type": [
            "integer",
            "null"
        ]
    },
    {
        "name": "C_Cpp.vcpkg.enabled",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.loggingLevel",
        "default": "Error",
        "type": "string"
    },
    {
        "name": "C_Cpp.autoAddFileAssociations",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "C_Cpp.preferredPathSeparator",
        "default": "Forward Slash",
        "type": "string"
    },
    {
        "name": "C_Cpp.updateChannel",
        "default": "Default",
        "type": "string"
    },
    {
        "name": "C_Cpp.experimentalFeatures",
        "desc": "Controls whether \"experimental\" features are usable.",
        "default": "disabled",
        "type": "string"
    },
    {
        "name": "C_Cpp.caseSensitiveFileSupport",
        "default": "default",
        "type": "string"
    },
    {
        "name": "C_Cpp.addNodeAddonIncludePaths",
        "default": false,
        "type": "boolean"
    }
]