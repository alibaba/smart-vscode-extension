[
    {
        "name": "jupyter.experiments.enabled",
        "desc": "Enables/disables A/B tests.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.showVariableViewWhenDebugging",
        "desc": "Bring up the Variable View when starting a Run by Line session.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.logging.level",
        "desc": "The logging level the extension logs at.",
        "default": "debug",
        "type": "string"
    },
    {
        "name": "jupyter.experiments.optInto",
        "default": [],
        "type": "array"
    },
    {
        "name": "jupyter.experiments.optOutFrom",
        "default": [],
        "type": "array"
    },
    {
        "name": "jupyter.widgetScriptSources",
        "default": [],
        "type": "array"
    },
    {
        "name": "jupyter.askForLargeDataFrames",
        "desc": "Warn the user before trying to open really large data frames.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.askForKernelRestart",
        "desc": "Warn the user before restarting a kernel.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.exportWithOutputEnabled",
        "desc": "Enable exporting a python file into a jupyter notebook and run all cells when doing so.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.jupyterLaunchTimeout",
        "desc": "Amount of time (in ms) to wait for the Jupyter Notebook server to start.",
        "default": 60000,
        "type": "number"
    },
    {
        "name": "jupyter.jupyterLaunchRetries",
        "desc": "Number of times to attempt to connect to the Jupyter Notebook",
        "default": 3,
        "type": "number"
    },
    {
        "name": "jupyter.jupyterCommandLineArguments",
        "desc": "If and when a Jupyter server is started, these arguments will be passed to into the Jupyter Notebook CLI. By default this list is generated by the Jupyter Extension.",
        "default": [],
        "type": "array"
    },
    {
        "name": "jupyter.notebookFileRoot",
        "default": "${fileDirname}",
        "type": "string"
    },
    {
        "name": "jupyter.useDefaultConfigForJupyter",
        "desc": "When running Jupyter locally, create a default empty Jupyter config",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.jupyterInterruptTimeout",
        "desc": "Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.",
        "default": 10000,
        "type": "number"
    },
    {
        "name": "jupyter.interactiveWindow.textEditor.executeSelection",
        "desc": "When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.interactiveWindow.textEditor.normalizeSelection",
        "desc": "Selected text will be normalized before it is executed in the Interactive Window.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.interactiveWindow.splitRunFileIntoCells",
        "desc": "A file run in the Interactive Window will be run in individual cells if it has them.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.variableExplorerExclude",
        "desc": "Types to exclude from showing in the Interactive variable explorer",
        "default": "module;function;builtin_function_or_method;ABCMeta;type;ModelMetaclass",
        "type": "string"
    },
    {
        "name": "jupyter.interactiveWindow.cellMarker.codeRegex",
        "desc": "Regular expression used to identify code cells. All code until the next match is considered part of this cell.",
        "default": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",
        "type": "string"
    },
    {
        "name": "jupyter.interactiveWindow.cellMarker.default",
        "desc": "Cell marker used for delineating a cell in a python file.",
        "default": "# %%",
        "type": "string"
    },
    {
        "name": "jupyter.interactiveWindow.cellMarker.markdownRegex",
        "desc": "Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.",
        "default": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",
        "type": "string"
    },
    {
        "name": "jupyter.themeMatplotlibPlots",
        "desc": "In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.interactiveWindow.cellMarker.decorateCells",
        "desc": "Draw a highlight behind the currently active cell, or all cells, in a python file.",
        "default": "currentCell",
        "type": "string"
    },
    {
        "name": "jupyter.interactiveWindow.codeLens.enable",
        "desc": "Enables code lens for 'cells' in a python file.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.interactiveWindow.textEditor.autoMoveToNextCell",
        "desc": "Enables moving to the next cell when clicking on a 'Run Cell' code lens.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.allowUnauthorizedRemoteConnection",
        "desc": "Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.interactiveWindow.codeLens.commands",
        "desc": "Set of commands to put as code lens above a cell.",
        "default": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",
        "type": "string"
    },
    {
        "name": "jupyter.interactiveWindow.codeLes.debugCommands",
        "desc": "Set of debug commands to put as code lens above a cell while debugging.",
        "default": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",
        "type": "string"
    },
    {
        "name": "jupyter.debugpyDistPath",
        "desc": "Path to debugpy bits for debugging cells.",
        "default": "",
        "type": "string"
    },
    {
        "name": "jupyter.stopOnFirstLineWhileDebugging",
        "desc": "When debugging a cell, stop on the first line.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.disableJupyterAutoStart",
        "desc": "When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.interactiveWindow.codeLens.enableGotoCell",
        "desc": "After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.kernels.excludePythonEnvironments",
        "default": [],
        "type": "array"
    },
    {
        "name": "jupyter.kernels.trusted",
        "default": [],
        "type": "array"
    },
    {
        "name": "jupyter.interactiveWindow.creationMode",
        "desc": "Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.",
        "default": "multiple",
        "type": "string"
    },
    {
        "name": "jupyter.interactiveWindow.textEditor.cellFolding",
        "desc": "Enable folding regions for code cells in Python files. This setting requires a reload of VS Code.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.interactiveWindow.viewColumn",
        "desc": "Where to open an Interactive Window that is not associated with a python file. 'beside' will open the interactive window to the right of the active editor. 'active' will open the interactive window in place of the active editor. 'secondGroup' will open the interactive window in the second editor group.",
        "default": "secondGroup",
        "type": "string"
    },
    {
        "name": "jupyter.interactiveWindow.textEditor.magicCommandsAsComments",
        "desc": "Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.pythonExportMethod",
        "desc": "The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.",
        "default": "direct",
        "type": "string"
    },
    {
        "name": "jupyter.runStartupCommands",
        "desc": "A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.",
        "default": "",
        "type": "array"
    },
    {
        "name": "jupyter.debugJustMyCode",
        "desc": "When debugging, only step through user-written code. Disable this to allow stepping into library code.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.showOutlineButtonInNotebookToolbar",
        "desc": "Show the Outline button in the Jupyter notebook toolbar.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.interactiveWindow.textEditor.autoAddNewCell",
        "desc": "Append a new empty cell to an interactive window file on running the currently last cell.",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.pythonCompletionTriggerCharacters",
        "desc": "Characters which trigger auto completion on a python jupyter kernel.",
        "default": ".%'\"",
        "type": "string"
    },
    {
        "name": "jupyter.logKernelOutputSeparately",
        "desc": "Creates separate output panels for kernels/jupyter server console output",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.excludeUserSitePackages",
        "desc": "Add PYTHONNOUSERSITE to kernels before starting. This prevents global/user site-packages from being used in the PYTHONPATH of the kernel.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.enableExtendedKernelCompletions",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.enableExtendedPythonKernelCompletions",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.executionAnalysis.enabled",
        "desc": "Experimental feature to enable execution analysis in notebooks",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.enableKernelCompletions",
        "default": true,
        "type": "boolean"
    },
    {
        "name": "jupyter.formatStackTraces",
        "desc": "Inject stack frame links into the stored traceback for the notebook.",
        "default": false,
        "type": "boolean"
    },
    {
        "name": "jupyter.completionTriggerCharacters",
        "default": {
            "bash": [
                "$",
                "{"
            ],
            "java": [
                ".",
                "@",
                "#"
            ],
            "javascript": [
                ".",
                "\"",
                "'",
                "/",
                "@"
            ],
            "python": [
                ".",
                "%",
                "'",
                "\""
            ],
            "julia": [
                "."
            ],
            "r": [
                "[",
                "(",
                ",",
                "$",
                "@",
                "\"",
                "'"
            ],
            "rust": [
                ".",
                ":"
            ],
            "scala": [
                "."
            ],
            "typescript": [
                ".",
                "\"",
                "'",
                "/",
                "@",
                "<"
            ]
        },
        "type": "object"
    }
]