[
    {
        "settingId": "javascript.autoClosingTags",
        "desc": " Enable/disable automatic closing of JSX tags.",
        "setting": {
            "javascript.autoClosingTags": true
        }
    },
    {
        "settingId": "javascript.format.enable",
        "desc": " Enable/disable default JavaScript formatter.",
        "setting": {
            "javascript.format.enable": true
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterCommaDelimiter",
        "desc": " Defines space handling after a comma delimiter.",
        "setting": {
            "javascript.format.insertSpaceAfterCommaDelimiter": true
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterConstructor",
        "desc": " Defines space handling after the constructor keyword.",
        "setting": {
            "javascript.format.insertSpaceAfterConstructor": false
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions",
        "desc": " Defines space handling after function keyword for anonymous functions.",
        "setting": {
            "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements",
        "desc": " Defines space handling after keywords in a control flow statement.",
        "setting": {
            "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces",
        "desc": " Defines space handling after opening and before closing empty braces.",
        "setting": {
            "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces",
        "desc": " Defines space handling after opening and before closing JSX expression braces.",
        "setting": {
            "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces",
        "desc": " Defines space handling after opening and before closing non-empty braces.",
        "setting": {
            "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets",
        "desc": " Defines space handling after opening and before closing non-empty brackets.",
        "setting": {
            "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis",
        "desc": " Defines space handling after opening and before closing non-empty parenthesis.",
        "setting": {
            "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces",
        "desc": " Defines space handling after opening and before closing template string braces.",
        "setting": {
            "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false
        }
    },
    {
        "settingId": "javascript.format.insertSpaceAfterSemicolonInForStatements",
        "desc": " Defines space handling after a semicolon in a for statement.",
        "setting": {
            "javascript.format.insertSpaceAfterSemicolonInForStatements": true
        }
    },
    {
        "settingId": "javascript.format.insertSpaceBeforeAndAfterBinaryOperators",
        "desc": " Defines space handling after a binary operator.",
        "setting": {
            "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true
        }
    },
    {
        "settingId": "javascript.format.insertSpaceBeforeFunctionParenthesis",
        "desc": " Defines space handling before function argument parentheses.",
        "setting": {
            "javascript.format.insertSpaceBeforeFunctionParenthesis": false
        }
    },
    {
        "settingId": "javascript.format.placeOpenBraceOnNewLineForControlBlocks",
        "desc": " Defines whether an open brace is put onto a new line for control blocks or not.",
        "setting": {
            "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false
        }
    },
    {
        "settingId": "javascript.format.placeOpenBraceOnNewLineForFunctions",
        "desc": " Defines whether an open brace is put onto a new line for functions or not.",
        "setting": {
            "javascript.format.placeOpenBraceOnNewLineForFunctions": false
        }
    },
    {
        "settingId": "javascript.format.semicolons",
        "desc": " Defines handling of optional semicolons.\n  - ignore: Don't insert or remove any semicolons.\n  - insert: Insert semicolons at statement ends.\n  - remove: Remove unnecessary semicolons.",
        "setting": {
            "javascript.format.semicolons": "ignore"
        }
    },
    {
        "settingId": "javascript.inlayHints.enumMemberValues.enabled",
        "desc": " Enable/disable inlay hints for member values in enum declarations:",
        "setting": {
            "javascript.inlayHints.enumMemberValues.enabled": false
        }
    },
    {
        "settingId": "javascript.inlayHints.functionLikeReturnTypes.enabled",
        "desc": " Enable/disable inlay hints for implicit return types on function signatures:",
        "setting": {
            "javascript.inlayHints.functionLikeReturnTypes.enabled": false
        }
    },
    {
        "settingId": "javascript.inlayHints.parameterNames.enabled",
        "desc": " Enable/disable inlay hints for parameter names:",
        "setting": {
            "javascript.inlayHints.parameterNames.enabled": "none"
        }
    },
    {
        "settingId": "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName",
        "desc": " Suppress parameter name hints on arguments whose text is identical to the parameter name.",
        "setting": {
            "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true
        }
    },
    {
        "settingId": "javascript.inlayHints.parameterTypes.enabled",
        "desc": " Enable/disable inlay hints for implicit parameter types:",
        "setting": {
            "javascript.inlayHints.parameterTypes.enabled": false
        }
    },
    {
        "settingId": "javascript.inlayHints.propertyDeclarationTypes.enabled",
        "desc": " Enable/disable inlay hints for implicit types on property declarations:",
        "setting": {
            "javascript.inlayHints.propertyDeclarationTypes.enabled": false
        }
    },
    {
        "settingId": "javascript.inlayHints.variableTypes.enabled",
        "desc": " Enable/disable inlay hints for implicit variable types:",
        "setting": {
            "javascript.inlayHints.variableTypes.enabled": false
        }
    },
    {
        "settingId": "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName",
        "desc": " Suppress type hints on variables whose name is identical to the type name.",
        "setting": {
            "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true
        }
    },
    {
        "settingId": "javascript.preferences.autoImportFileExcludePatterns",
        "desc": " Specify glob patterns of files to exclude from auto imports.",
        "setting": {
            "javascript.preferences.autoImportFileExcludePatterns": []
        }
    },
    {
        "settingId": "javascript.preferences.importModuleSpecifier",
        "desc": " Preferred path style for auto imports.\n  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.\n  - relative: Prefers a relative path to the imported file location.\n  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.\n  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.",
        "setting": {
            "javascript.preferences.importModuleSpecifier": "shortest"
        }
    },
    {
        "settingId": "javascript.preferences.importModuleSpecifierEnding",
        "desc": " Preferred path ending for auto imports.\n  - auto: Use project settings to select a default.\n  - minimal: Shorten `./component/index.js` to `./component`.\n  - index: Shorten `./component/index.js` to `./component/index`.\n  - js: Do not shorten path endings; include the `.js` or `.ts` extension.",
        "setting": {
            "javascript.preferences.importModuleSpecifierEnding": "auto"
        }
    },
    {
        "settingId": "javascript.preferences.jsxAttributeCompletionStyle",
        "desc": " Preferred style for JSX attribute completions.\n  - auto: Insert `={}` or `=\"\"` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.\n  - braces: Insert `={}` after attribute names.\n  - none: Only insert attribute names.",
        "setting": {
            "javascript.preferences.jsxAttributeCompletionStyle": "auto"
        }
    },
    {
        "settingId": "javascript.preferences.quoteStyle",
        "desc": " Preferred quote style to use for Quick Fixes.\n  - auto: Infer quote type from existing code\n  - single: Always use single quotes: `'`\n  - double: Always use double quotes: `\"`",
        "setting": {
            "javascript.preferences.quoteStyle": "auto"
        }
    },
    {
        "settingId": "javascript.preferences.renameMatchingJsxTags",
        "desc": " When on a JSX tag, try to rename the matching tag instead of renaming the symbol.",
        "setting": {
            "javascript.preferences.renameMatchingJsxTags": true
        }
    },
    {
        "settingId": "javascript.preferences.renameShorthandProperties",
        "desc": " The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'\n Enable/disable introducing aliases for object shorthand properties during renames.",
        "setting": {
            "javascript.preferences.renameShorthandProperties": true
        }
    },
    {
        "settingId": "javascript.preferences.useAliasesForRenames",
        "desc": " Enable/disable introducing aliases for object shorthand properties during renames.",
        "setting": {
            "javascript.preferences.useAliasesForRenames": true
        }
    },
    {
        "settingId": "javascript.preferGoToSourceDefinition",
        "desc": " Makes Go to Definition avoid type declaration files when possible by triggering Go to Source Definition instead. This allows Go to Source Definition to be triggered with the mouse gesture.",
        "setting": {
            "javascript.preferGoToSourceDefinition": false
        }
    },
    {
        "settingId": "javascript.referencesCodeLens.enabled",
        "desc": " Enable/disable references CodeLens in JavaScript files.",
        "setting": {
            "javascript.referencesCodeLens.enabled": false
        }
    },
    {
        "settingId": "javascript.referencesCodeLens.showOnAllFunctions",
        "desc": " Enable/disable references CodeLens on all functions in JavaScript files.",
        "setting": {
            "javascript.referencesCodeLens.showOnAllFunctions": false
        }
    },
    {
        "settingId": "javascript.suggest.autoImports",
        "desc": " Enable/disable auto import suggestions.",
        "setting": {
            "javascript.suggest.autoImports": true
        }
    },
    {
        "settingId": "javascript.suggest.classMemberSnippets.enabled",
        "desc": " Enable/disable snippet completions for class members.",
        "setting": {
            "javascript.suggest.classMemberSnippets.enabled": true
        }
    },
    {
        "settingId": "javascript.suggest.completeFunctionCalls",
        "desc": " Complete functions with their parameter signature.",
        "setting": {
            "javascript.suggest.completeFunctionCalls": false
        }
    },
    {
        "settingId": "javascript.suggest.completeJSDocs",
        "desc": " Enable/disable suggestion to complete JSDoc comments.",
        "setting": {
            "javascript.suggest.completeJSDocs": true
        }
    },
    {
        "settingId": "javascript.suggest.enabled",
        "desc": " Enabled/disable autocomplete suggestions.",
        "setting": {
            "javascript.suggest.enabled": true
        }
    },
    {
        "settingId": "javascript.suggest.includeAutomaticOptionalChainCompletions",
        "desc": " Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.",
        "setting": {
            "javascript.suggest.includeAutomaticOptionalChainCompletions": true
        }
    },
    {
        "settingId": "javascript.suggest.includeCompletionsForImportStatements",
        "desc": " Enable/disable auto-import-style completions on partially-typed import statements.",
        "setting": {
            "javascript.suggest.includeCompletionsForImportStatements": true
        }
    },
    {
        "settingId": "javascript.suggest.jsdoc.generateReturns",
        "desc": " Enable/disable generating `@returns` annotations for JSDoc templates.",
        "setting": {
            "javascript.suggest.jsdoc.generateReturns": true
        }
    },
    {
        "settingId": "javascript.suggest.names",
        "desc": " Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.",
        "setting": {
            "javascript.suggest.names": true
        }
    },
    {
        "settingId": "javascript.suggest.paths",
        "desc": " Enable/disable suggestions for paths in import statements and require calls.",
        "setting": {
            "javascript.suggest.paths": true
        }
    },
    {
        "settingId": "javascript.suggestionActions.enabled",
        "desc": " Enable/disable suggestion diagnostics for JavaScript files in the editor.",
        "setting": {
            "javascript.suggestionActions.enabled": true
        }
    },
    {
        "settingId": "javascript.updateImportsOnFileMove.enabled",
        "desc": " Enable/disable automatic updating of import paths when you rename or move a file in VS Code.\n  - prompt: Prompt on each rename.\n  - always: Always update paths automatically.\n  - never: Never rename paths and don't prompt.",
        "setting": {
            "javascript.updateImportsOnFileMove.enabled": "prompt"
        }
    },
    {
        "settingId": "javascript.validate.enable",
        "desc": " Enable/disable JavaScript validation.",
        "setting": {
            "javascript.validate.enable": true
        }
    }
]