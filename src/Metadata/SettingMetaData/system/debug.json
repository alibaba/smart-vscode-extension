[
    {
        "settingId": "debug.allowBreakpointsEverywhere",
        "desc": " Allow setting breakpoints in any file.",
        "setting": {
            "debug.allowBreakpointsEverywhere": false
        }
    },
    {
        "settingId": "debug.autoExpandLazyVariables",
        "desc": " Automatically show values for variables that are lazily resolved by the debugger, such as getters.",
        "setting": {
            "debug.autoExpandLazyVariables": false
        }
    },
    {
        "settingId": "debug.closeReadonlyTabsOnEnd",
        "desc": " At the end of a debug session, all the read-only tabs associated with that session will be closed",
        "setting": {
            "debug.closeReadonlyTabsOnEnd": false
        }
    },
    {
        "settingId": "debug.confirmOnExit",
        "desc": " Controls whether to confirm when the window closes if there are active debug sessions.\n  - never: Never confirm.\n  - always: Always confirm if there are debug sessions.",
        "setting": {
            "debug.confirmOnExit": "never"
        }
    },
    {
        "settingId": "debug.console.acceptSuggestionOnEnter",
        "desc": " Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console.",
        "setting": {
            "debug.console.acceptSuggestionOnEnter": "off"
        }
    },
    {
        "settingId": "debug.console.closeOnEnd",
        "desc": " Controls if the Debug Console should be automatically closed when the debug session ends.",
        "setting": {
            "debug.console.closeOnEnd": false
        }
    },
    {
        "settingId": "debug.console.collapseIdenticalLines",
        "desc": " Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge.",
        "setting": {
            "debug.console.collapseIdenticalLines": true
        }
    },
    {
        "settingId": "debug.console.fontFamily",
        "desc": " Controls the font family in the Debug Console.",
        "setting": {
            "debug.console.fontFamily": "default"
        }
    },
    {
        "settingId": "debug.console.fontSize",
        "desc": " Controls the font size in pixels in the Debug Console.",
        "setting": {
            "debug.console.fontSize": 14
        }
    },
    {
        "settingId": "debug.console.historySuggestions",
        "desc": " Controls if the Debug Console should suggest previously typed input.",
        "setting": {
            "debug.console.historySuggestions": true
        }
    },
    {
        "settingId": "debug.console.lineHeight",
        "desc": " Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size.",
        "setting": {
            "debug.console.lineHeight": 0
        }
    },
    {
        "settingId": "debug.console.wordWrap",
        "desc": " Controls if the lines should wrap in the Debug Console.",
        "setting": {
            "debug.console.wordWrap": true
        }
    },
    {
        "settingId": "debug.disassemblyView.showSourceCode",
        "desc": " Show Source Code in Disassembly View.",
        "setting": {
            "debug.disassemblyView.showSourceCode": true
        }
    },
    {
        "settingId": "debug.enableStatusBarColor",
        "desc": " Color of the Status bar when debugger is active.",
        "setting": {
            "debug.enableStatusBarColor": true
        }
    },
    {
        "settingId": "debug.focusEditorOnBreak",
        "desc": " Controls whether the editor should be focused when the debugger breaks.",
        "setting": {
            "debug.focusEditorOnBreak": true
        }
    },
    {
        "settingId": "debug.focusWindowOnBreak",
        "desc": " Controls whether the workbench window should be focused when the debugger breaks.",
        "setting": {
            "debug.focusWindowOnBreak": true
        }
    },
    {
        "settingId": "debug.gutterMiddleClickAction",
        "desc": " Controls the action to perform when clicking the editor gutter with the middle mouse button.\n  - logpoint: Add Logpoint.\n  - conditionalBreakpoint: Add Conditional Breakpoint.\n  - triggeredBreakpoint: Add Triggered Breakpoint.\n  - none: Don't perform any action.",
        "setting": {
            "debug.gutterMiddleClickAction": "logpoint"
        }
    },
    {
        "settingId": "debug.hideLauncherWhileDebugging",
        "desc": " Hide 'Start Debugging' control in title bar of 'Run and Debug' view while debugging is active. Only relevant when `debug.toolBarLocation` is not `docked`.",
        "setting": {
            "debug.hideLauncherWhileDebugging": false
        }
    },
    {
        "settingId": "debug.inlineValues",
        "desc": " Show variable values inline in editor while debugging.\n  - on: Always show variable values inline in editor while debugging.\n  - off: Never show variable values inline in editor while debugging.\n  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.",
        "setting": {
            "debug.inlineValues": "auto"
        }
    },
    {
        "settingId": "debug.internalConsoleOptions",
        "desc": " Controls when the internal Debug Console should open.",
        "setting": {
            "debug.internalConsoleOptions": "openOnFirstSessionStart"
        }
    },
    {
        "settingId": "debug.onTaskErrors",
        "desc": " Controls what to do when errors are encountered after running a preLaunchTask.\n  - debugAnyway: Ignore task errors and start debugging.\n  - showErrors: Show the Problems view and do not start debugging.\n  - prompt: Prompt user.\n  - abort: Cancel debugging.",
        "setting": {
            "debug.onTaskErrors": "prompt"
        }
    },
    {
        "settingId": "debug.openDebug",
        "desc": " Controls when the debug view should open.",
        "setting": {
            "debug.openDebug": "openOnDebugBreak"
        }
    },
    {
        "settingId": "debug.openExplorerOnEnd",
        "desc": " Automatically open the explorer view at the end of a debug session.",
        "setting": {
            "debug.openExplorerOnEnd": false
        }
    },
    {
        "settingId": "debug.saveBeforeStart",
        "desc": " Controls what editors to save before starting a debug session.\n  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.\n  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.\n  - none: Don't save any editors before starting a debug session.",
        "setting": {
            "debug.saveBeforeStart": "allEditorsInActiveGroup"
        }
    },
    {
        "settingId": "debug.showBreakpointsInOverviewRuler",
        "desc": " Controls whether breakpoints should be shown in the overview ruler.",
        "setting": {
            "debug.showBreakpointsInOverviewRuler": false
        }
    },
    {
        "settingId": "debug.showInlineBreakpointCandidates",
        "desc": " Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.",
        "setting": {
            "debug.showInlineBreakpointCandidates": true
        }
    },
    {
        "settingId": "debug.showInStatusBar",
        "desc": " Controls when the debug Status bar should be visible.\n  - never: Never show debug in Status bar\n  - always: Always show debug in Status bar\n  - onFirstSessionStart: Show debug in Status bar only after debug was started for the first time",
        "setting": {
            "debug.showInStatusBar": "onFirstSessionStart"
        }
    },
    {
        "settingId": "debug.showSubSessionsInToolBar",
        "desc": " Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.",
        "setting": {
            "debug.showSubSessionsInToolBar": false
        }
    },
    {
        "settingId": "debug.terminal.clearBeforeReusing",
        "desc": " Before starting a new debug session in an integrated or external terminal, clear the terminal.",
        "setting": {
            "debug.terminal.clearBeforeReusing": false
        }
    },
    {
        "settingId": "debug.toolBarLocation",
        "desc": " Controls the location of the debug toolbar.\n  - floating: Show debug toolbar in all views.\n  - docked: Show debug toolbar only in debug views.\n  - commandCenter: `(Experimental)` Show debug toolbar in the command center.\n  - hidden: Do not show debug toolbar.",
        "setting": {
            "debug.toolBarLocation": "floating"
        }
    },
    {
        "settingId": "debug.javascript.autoAttachFilter",
        "desc": " Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.\n  - always: Auto attach to every Node.js process launched in the terminal.\n  - smart: Auto attach when running scripts that aren't in a node_modules folder.\n  - onlyWithFlag: Only auto attach when the `--inspect` is given.\n  - disabled: Auto attach is disabled and not shown in status bar.",
        "setting": {
            "debug.javascript.autoAttachFilter": "disabled"
        }
    },
    {
        "settingId": "debug.javascript.autoAttachSmartPattern",
        "desc": " Configures glob patterns for determining when to attach in \"smart\" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners.",
        "setting": {
            "debug.javascript.autoAttachSmartPattern": [
                "${workspaceFolder}/**",
                "!**/node_modules/**",
                "**/$KNOWN_TOOLS$/**"
            ]
        }
    },
    {
        "settingId": "debug.javascript.automaticallyTunnelRemoteServer",
        "desc": " When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.",
        "setting": {
            "debug.javascript.automaticallyTunnelRemoteServer": true
        }
    },
    {
        "settingId": "debug.javascript.breakOnConditionalError",
        "desc": " Whether to stop when conditional breakpoints throw an error.",
        "setting": {
            "debug.javascript.breakOnConditionalError": false
        }
    },
    {
        "settingId": "debug.javascript.codelens.npmScripts",
        "desc": " Where a \"Run\" and \"Debug\" code lens should be shown in your npm scripts. It may be on \"all\", scripts, on \"top\" of the script section, or \"never\".",
        "setting": {
            "debug.javascript.codelens.npmScripts": "top"
        }
    },
    {
        "settingId": "debug.javascript.debugByLinkOptions",
        "desc": " Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to \"off\" to disable this behavior, or \"always\" to enable debugging in all terminals.",
        "setting": {
            "debug.javascript.debugByLinkOptions": "on"
        }
    },
    {
        "settingId": "debug.javascript.defaultRuntimeExecutable",
        "desc": " The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.",
        "setting": {
            "debug.javascript.defaultRuntimeExecutable": {
                "pwa-node": "node"
            }
        }
    },
    {
        "settingId": "debug.javascript.pickAndAttachOptions",
        "desc": " Default options used when debugging a process through the `Debug: Attach to Node.js Process` command.",
        "setting": {
            "debug.javascript.pickAndAttachOptions": {}
        }
    },
    {
        "settingId": "debug.javascript.resourceRequestOptions",
        "desc": " Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the `got` library.\n A common case to disable certificate verification can be done by passing `{ \"https\": { \"rejectUnauthorized\": false } }`.",
        "setting": {
            "debug.javascript.resourceRequestOptions": {}
        }
    },
    {
        "settingId": "debug.javascript.terminalOptions",
        "desc": " Default launch options for the JavaScript debug terminal and npm scripts.",
        "setting": {
            "debug.javascript.terminalOptions": {}
        }
    },
    {
        "settingId": "debug.javascript.unmapMissingSources",
        "desc": " Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.",
        "setting": {
            "debug.javascript.unmapMissingSources": false
        }
    }
]