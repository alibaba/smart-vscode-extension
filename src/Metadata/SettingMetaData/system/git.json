[
    {
        "settingId": "git.allowForcePush",
        "desc": " Controls whether force push (with or without lease) is enabled.",
        "setting": {
            "git.allowForcePush": false
        }
    },
    {
        "settingId": "git.allowNoVerifyCommit",
        "desc": " Controls whether commits without running pre-commit and commit-msg hooks are allowed.",
        "setting": {
            "git.allowNoVerifyCommit": false
        }
    },
    {
        "settingId": "git.alwaysShowStagedChangesResourceGroup",
        "desc": " Always show the Staged Changes resource group.",
        "setting": {
            "git.alwaysShowStagedChangesResourceGroup": false
        }
    },
    {
        "settingId": "git.alwaysSignOff",
        "desc": " Controls the signoff flag for all commits.",
        "setting": {
            "git.alwaysSignOff": false
        }
    },
    {
        "settingId": "git.autofetch",
        "desc": " When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.",
        "setting": {
            "git.autofetch": false
        }
    },
    {
        "settingId": "git.autofetchPeriod",
        "desc": " Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.",
        "setting": {
            "git.autofetchPeriod": 180
        }
    },
    {
        "settingId": "git.autorefresh",
        "desc": " Whether auto refreshing is enabled.",
        "setting": {
            "git.autorefresh": true
        }
    },
    {
        "settingId": "git.autoRepositoryDetection",
        "desc": " Configures when repositories should be automatically detected.\n  - true: Scan for both subfolders of the current opened folder and parent folders of open files.\n  - false: Disable automatic repository scanning.\n  - subFolders: Scan for subfolders of the currently opened folder.\n  - openEditors: Scan for parent folders of open files.",
        "setting": {
            "git.autoRepositoryDetection": true
        }
    },
    {
        "settingId": "git.autoStash",
        "desc": " Stash any changes before pulling and restore them after successful pull.",
        "setting": {
            "git.autoStash": false
        }
    },
    {
        "settingId": "git.branchPrefix",
        "desc": " Prefix used when creating a new branch.",
        "setting": {
            "git.branchPrefix": ""
        }
    },
    {
        "settingId": "git.branchProtection",
        "desc": " List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.",
        "setting": {
            "git.branchProtection": []
        }
    },
    {
        "settingId": "git.branchProtectionPrompt",
        "desc": " Controls whether a prompt is being shown before changes are committed to a protected branch.\n  - alwaysCommit: Always commit changes to the protected branch.\n  - alwaysCommitToNewBranch: Always commit changes to a new branch.\n  - alwaysPrompt: Always prompt before changes are committed to a protected branch.",
        "setting": {
            "git.branchProtectionPrompt": "alwaysPrompt"
        }
    },
    {
        "settingId": "git.branchRandomName.dictionary",
        "desc": " List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.\n  - adjectives: A random adjective\n  - animals: A random animal name\n  - colors: A random color name\n  - numbers: A random number between 100 and 999",
        "setting": {
            "git.branchRandomName.dictionary": [
                "adjectives",
                "animals"
            ]
        }
    },
    {
        "settingId": "git.branchRandomName.enable",
        "desc": " Controls whether a random name is generated when creating a new branch.",
        "setting": {
            "git.branchRandomName.enable": false
        }
    },
    {
        "settingId": "git.branchSortOrder",
        "desc": " Controls the sort order for branches.",
        "setting": {
            "git.branchSortOrder": "committerdate"
        }
    },
    {
        "settingId": "git.branchValidationRegex",
        "desc": " A regular expression to validate new branch names.",
        "setting": {
            "git.branchValidationRegex": ""
        }
    },
    {
        "settingId": "git.branchWhitespaceChar",
        "desc": " The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.",
        "setting": {
            "git.branchWhitespaceChar": "-"
        }
    },
    {
        "settingId": "git.checkoutType",
        "desc": " Controls what type of Git refs are listed when running `Checkout to...`.\n  - local: Local branches\n  - tags: Tags\n  - remote: Remote branches",
        "setting": {
            "git.checkoutType": [
                "local",
                "remote",
                "tags"
            ]
        }
    },
    {
        "settingId": "git.closeDiffOnOperation",
        "desc": " Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.",
        "setting": {
            "git.closeDiffOnOperation": false
        }
    },
    {
        "settingId": "git.commandsToLog",
        "desc": " List of git commands (ex: commit, push) that would have their `stdout` logged to the git output. If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the git output.",
        "setting": {
            "git.commandsToLog": []
        }
    },
    {
        "settingId": "git.confirmEmptyCommits",
        "desc": " Always confirm the creation of empty commits for the 'Git: Commit Empty' command.",
        "setting": {
            "git.confirmEmptyCommits": true
        }
    },
    {
        "settingId": "git.confirmForcePush",
        "desc": " Controls whether to ask for confirmation before force-pushing.",
        "setting": {
            "git.confirmForcePush": true
        }
    },
    {
        "settingId": "git.confirmNoVerifyCommit",
        "desc": " Controls whether to ask for confirmation before committing without verification.",
        "setting": {
            "git.confirmNoVerifyCommit": true
        }
    },
    {
        "settingId": "git.confirmSync",
        "desc": " Confirm before synchronizing Git repositories.",
        "setting": {
            "git.confirmSync": true
        }
    },
    {
        "settingId": "git.countBadge",
        "desc": " Controls the Git count badge.\n  - all: Count all changes.\n  - tracked: Count only tracked changes.\n  - off: Turn off counter.",
        "setting": {
            "git.countBadge": "all"
        }
    },
    {
        "settingId": "git.decorations.enabled",
        "desc": " Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.",
        "setting": {
            "git.decorations.enabled": true
        }
    },
    {
        "settingId": "git.defaultBranchName",
        "desc": " The name of the default branch (example: main, trunk, development) when initializing a new Git repository. When set to empty, the default branch name configured in Git will be used.",
        "setting": {
            "git.defaultBranchName": "main"
        }
    },
    {
        "settingId": "git.defaultCloneDirectory",
        "desc": " The default location to clone a Git repository.",
        "setting": {
            "git.defaultCloneDirectory": null
        }
    },
    {
        "settingId": "git.detectSubmodules",
        "desc": " Controls whether to automatically detect Git submodules.",
        "setting": {
            "git.detectSubmodules": true
        }
    },
    {
        "settingId": "git.detectSubmodulesLimit",
        "desc": " Controls the limit of Git submodules detected.",
        "setting": {
            "git.detectSubmodulesLimit": 10
        }
    },
    {
        "settingId": "git.enableCommitSigning",
        "desc": " Enables commit signing with GPG, X.509, or SSH.",
        "setting": {
            "git.enableCommitSigning": false
        }
    },
    {
        "settingId": "git.enabled",
        "desc": " Whether Git is enabled.",
        "setting": {
            "git.enabled": true
        }
    },
    {
        "settingId": "git.enableSmartCommit",
        "desc": " Commit all changes when there are no staged changes.",
        "setting": {
            "git.enableSmartCommit": false
        }
    },
    {
        "settingId": "git.enableStatusBarSync",
        "desc": " Controls whether the Git Sync command appears in the status bar.",
        "setting": {
            "git.enableStatusBarSync": true
        }
    },
    {
        "settingId": "git.fetchOnPull",
        "desc": " When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.",
        "setting": {
            "git.fetchOnPull": false
        }
    },
    {
        "settingId": "git.followTagsWhenSync",
        "desc": " Push all annotated tags when running the sync command.",
        "setting": {
            "git.followTagsWhenSync": false
        }
    },
    {
        "settingId": "git.ignoredRepositories",
        "desc": " List of Git repositories to ignore.",
        "setting": {
            "git.ignoredRepositories": []
        }
    },
    {
        "settingId": "git.ignoreLegacyWarning",
        "desc": " Ignores the legacy Git warning.",
        "setting": {
            "git.ignoreLegacyWarning": false
        }
    },
    {
        "settingId": "git.ignoreLimitWarning",
        "desc": " Ignores the warning when there are too many changes in a repository.",
        "setting": {
            "git.ignoreLimitWarning": false
        }
    },
    {
        "settingId": "git.ignoreMissingGitWarning",
        "desc": " Ignores the warning when Git is missing.",
        "setting": {
            "git.ignoreMissingGitWarning": false
        }
    },
    {
        "settingId": "git.ignoreRebaseWarning",
        "desc": " Ignores the warning when it looks like the branch might have been rebased when pulling.",
        "setting": {
            "git.ignoreRebaseWarning": false
        }
    },
    {
        "settingId": "git.ignoreSubmodules",
        "desc": " Ignore modifications to submodules in the file tree.",
        "setting": {
            "git.ignoreSubmodules": false
        }
    },
    {
        "settingId": "git.ignoreWindowsGit27Warning",
        "desc": " Ignores the warning when Git 2.25 - 2.26 is installed on Windows.",
        "setting": {
            "git.ignoreWindowsGit27Warning": false
        }
    },
    {
        "settingId": "git.inputValidation",
        "desc": " Controls whether to show commit message input validation diagnostics.",
        "setting": {
            "git.inputValidation": false
        }
    },
    {
        "settingId": "git.inputValidationLength",
        "desc": " Controls the commit message length threshold for showing a warning.",
        "setting": {
            "git.inputValidationLength": 72
        }
    },
    {
        "settingId": "git.inputValidationSubjectLength",
        "desc": " Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `git.inputValidationLength`.",
        "setting": {
            "git.inputValidationSubjectLength": 50
        }
    },
    {
        "settingId": "git.mergeEditor",
        "desc": " Open the merge editor for files that are currently under conflict.",
        "setting": {
            "git.mergeEditor": false
        }
    },
    {
        "settingId": "git.openAfterClone",
        "desc": " Controls whether to open a repository automatically after cloning.\n  - always: Always open in current window.\n  - alwaysNewWindow: Always open in a new window.\n  - whenNoFolderOpen: Only open in current window when no folder is opened.\n  - prompt: Always prompt for action.",
        "setting": {
            "git.openAfterClone": "prompt"
        }
    },
    {
        "settingId": "git.openDiffOnClick",
        "desc": " Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.",
        "setting": {
            "git.openDiffOnClick": true
        }
    },
    {
        "settingId": "git.openRepositoryInParentFolders",
        "desc": " Control whether a repository in parent folders of workspaces or open files should be opened.\n  - always: Always open a repository in parent folders of workspaces or open files.\n  - never: Never open a repository in parent folders of workspaces or open files.\n  - prompt: Prompt before opening a repository the parent folders of workspaces or open files.",
        "setting": {
            "git.openRepositoryInParentFolders": "prompt"
        }
    },
    {
        "settingId": "git.optimisticUpdate",
        "desc": " Controls whether to optimistically update the state of the Source Control view after running git commands.",
        "setting": {
            "git.optimisticUpdate": true
        }
    },
    {
        "settingId": "git.path",
        "desc": " Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.",
        "setting": {
            "git.path": null
        }
    },
    {
        "settingId": "git.postCommitCommand",
        "desc": " Run a git command after a successful commit.\n  - none: Don't run any command after a commit.\n  - push: Run 'git push' after a successful commit.\n  - sync: Run 'git pull' and 'git push' after a successful commit.",
        "setting": {
            "git.postCommitCommand": "none"
        }
    },
    {
        "settingId": "git.promptToSaveFilesBeforeCommit",
        "desc": " Controls whether Git should check for unsaved files before committing.\n  - always: Check for any unsaved files.\n  - staged: Check only for unsaved staged files.\n  - never: Disable this check.",
        "setting": {
            "git.promptToSaveFilesBeforeCommit": "always"
        }
    },
    {
        "settingId": "git.promptToSaveFilesBeforeStash",
        "desc": " Controls whether Git should check for unsaved files before stashing changes.\n  - always: Check for any unsaved files.\n  - staged: Check only for unsaved staged files.\n  - never: Disable this check.",
        "setting": {
            "git.promptToSaveFilesBeforeStash": "always"
        }
    },
    {
        "settingId": "git.pruneOnFetch",
        "desc": " Prune when fetching.",
        "setting": {
            "git.pruneOnFetch": false
        }
    },
    {
        "settingId": "git.pullBeforeCheckout",
        "desc": " Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.",
        "setting": {
            "git.pullBeforeCheckout": false
        }
    },
    {
        "settingId": "git.pullTags",
        "desc": " Fetch all tags when pulling.",
        "setting": {
            "git.pullTags": true
        }
    },
    {
        "settingId": "git.rebaseWhenSync",
        "desc": " Force Git to use rebase when running the sync command.",
        "setting": {
            "git.rebaseWhenSync": false
        }
    },
    {
        "settingId": "git.rememberPostCommitCommand",
        "desc": " Remember the last git command that ran after a commit.",
        "setting": {
            "git.rememberPostCommitCommand": false
        }
    },
    {
        "settingId": "git.replaceTagsWhenPull",
        "desc": " Automatically replace the local tags with the remote tags in case of a conflict when running the pull command.",
        "setting": {
            "git.replaceTagsWhenPull": false
        }
    },
    {
        "settingId": "git.repositoryScanIgnoredFolders",
        "desc": " List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.",
        "setting": {
            "git.repositoryScanIgnoredFolders": [
                "node_modules"
            ]
        }
    },
    {
        "settingId": "git.repositoryScanMaxDepth",
        "desc": " Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.",
        "setting": {
            "git.repositoryScanMaxDepth": 1
        }
    },
    {
        "settingId": "git.requireGitUserConfig",
        "desc": " Controls whether to require explicit Git user configuration or allow Git to guess if missing.",
        "setting": {
            "git.requireGitUserConfig": true
        }
    },
    {
        "settingId": "git.scanRepositories",
        "desc": " List of paths to search for Git repositories in.",
        "setting": {
            "git.scanRepositories": []
        }
    },
    {
        "settingId": "git.showActionButton",
        "desc": " Controls whether an action button is shown in the Source Control view.",
        "setting": {
            "git.showActionButton": {
                "commit": true,
                "publish": true,
                "sync": true
            }
        }
    },
    {
        "settingId": "git.showCommitInput",
        "desc": " Controls whether to show the commit input in the Git source control panel.",
        "setting": {
            "git.showCommitInput": true
        }
    },
    {
        "settingId": "git.showInlineOpenFileAction",
        "desc": " Controls whether to show an inline Open File action in the Git changes view.",
        "setting": {
            "git.showInlineOpenFileAction": true
        }
    },
    {
        "settingId": "git.showProgress",
        "desc": " Controls whether Git actions should show progress.",
        "setting": {
            "git.showProgress": true
        }
    },
    {
        "settingId": "git.showPushSuccessNotification",
        "desc": " Controls whether to show a notification when a push is successful.",
        "setting": {
            "git.showPushSuccessNotification": false
        }
    },
    {
        "settingId": "git.similarityThreshold",
        "desc": " Controls the threshold of the similarity index (the amount of additions/deletions compared to the file's size) for changes in a pair of added/deleted files to be considered a rename.",
        "setting": {
            "git.similarityThreshold": 50
        }
    },
    {
        "settingId": "git.smartCommitChanges",
        "desc": " Control which changes are automatically staged by Smart Commit.\n  - all: Automatically stage all changes.\n  - tracked: Automatically stage tracked changes only.",
        "setting": {
            "git.smartCommitChanges": "all"
        }
    },
    {
        "settingId": "git.statusLimit",
        "desc": " Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.",
        "setting": {
            "git.statusLimit": 10000
        }
    },
    {
        "settingId": "git.suggestSmartCommit",
        "desc": " Suggests to enable smart commit (commit all changes when there are no staged changes).",
        "setting": {
            "git.suggestSmartCommit": true
        }
    },
    {
        "settingId": "git.supportCancellation",
        "desc": " Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.",
        "setting": {
            "git.supportCancellation": false
        }
    },
    {
        "settingId": "git.terminalAuthentication",
        "desc": " Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
        "setting": {
            "git.terminalAuthentication": true
        }
    },
    {
        "settingId": "git.terminalGitEditor",
        "desc": " Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
        "setting": {
            "git.terminalGitEditor": false
        }
    },
    {
        "settingId": "git.timeline.date",
        "desc": " Controls which date to use for items in the Timeline view.\n  - committed: Use the committed date\n  - authored: Use the authored date",
        "setting": {
            "git.timeline.date": "committed"
        }
    },
    {
        "settingId": "git.timeline.showAuthor",
        "desc": " Controls whether to show the commit author in the Timeline view.",
        "setting": {
            "git.timeline.showAuthor": true
        }
    },
    {
        "settingId": "git.timeline.showUncommitted",
        "desc": " Controls whether to show uncommitted changes in the Timeline view.",
        "setting": {
            "git.timeline.showUncommitted": false
        }
    },
    {
        "settingId": "git.untrackedChanges",
        "desc": " Controls how untracked changes behave.\n  - mixed: All changes, tracked and untracked, appear together and behave equally.\n  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.\n  - hidden: Untracked changes are hidden and excluded from several actions.",
        "setting": {
            "git.untrackedChanges": "mixed"
        }
    },
    {
        "settingId": "git.useCommitInputAsStashMessage",
        "desc": " Controls whether to use the message from the commit input box as the default stash message.",
        "setting": {
            "git.useCommitInputAsStashMessage": false
        }
    },
    {
        "settingId": "git.useEditorAsCommitInput",
        "desc": " Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.",
        "setting": {
            "git.useEditorAsCommitInput": true
        }
    },
    {
        "settingId": "git.useForcePushIfIncludes",
        "desc": " Controls whether force pushing uses the safer force-if-includes variant.",
        "setting": {
            "git.useForcePushIfIncludes": true
        }
    },
    {
        "settingId": "git.useForcePushWithLease",
        "desc": " Controls whether force pushing uses the safer force-with-lease variant.",
        "setting": {
            "git.useForcePushWithLease": true
        }
    },
    {
        "settingId": "git.useIntegratedAskPass",
        "desc": " Controls whether GIT_ASKPASS should be overwritten to use the integrated version.",
        "setting": {
            "git.useIntegratedAskPass": true
        }
    },
    {
        "settingId": "git.verboseCommit",
        "desc": " Enable verbose output when `git.useEditorAsCommitInput` is enabled.",
        "setting": {
            "git.verboseCommit": false
        }
    }
]